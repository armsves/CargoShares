/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace INFTCollectionFactory {
      
    export type CollectionInfoStruct = {collectionAddress: AddressLike, name: string, symbol: string, baseURI: string, creator: AddressLike, createdAt: BigNumberish}

    export type CollectionInfoStructOutput = [collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint] & {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint }
  
    }

  export interface NFTCollectionFactoryInterface extends Interface {
    getFunction(nameOrSignature: "collectionAddressToInfo" | "collections" | "createCollection" | "createCollectionWithMint" | "creationFee" | "creatorToCollectionIndexes" | "defaultListingPrice" | "defaultMintCount" | "getAllCollections" | "getCollection" | "getCollectionCountByCreator" | "getCollectionInfo" | "getCollectionsByCreator" | "getCollectionsCount" | "marketplaceAddress" | "owner" | "renounceOwnership" | "setCreationFee" | "setDefaultListingPrice" | "setDefaultMintCount" | "setMarketplaceAddress" | "transferOwnership" | "withdrawFees"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CollectionCreated" | "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'collectionAddressToInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'collections', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createCollection', values: [string, string, string]): string;
encodeFunctionData(functionFragment: 'createCollectionWithMint', values: [string, string, string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'creationFee', values?: undefined): string;
encodeFunctionData(functionFragment: 'creatorToCollectionIndexes', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'defaultListingPrice', values?: undefined): string;
encodeFunctionData(functionFragment: 'defaultMintCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getAllCollections', values?: undefined): string;
encodeFunctionData(functionFragment: 'getCollection', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCollectionCountByCreator', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getCollectionInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getCollectionsByCreator', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getCollectionsCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'marketplaceAddress', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setCreationFee', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setDefaultListingPrice', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setDefaultMintCount', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setMarketplaceAddress', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawFees', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'collectionAddressToInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'collections', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createCollection', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createCollectionWithMint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'creationFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'creatorToCollectionIndexes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'defaultListingPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'defaultMintCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllCollections', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollection', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollectionCountByCreator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollectionInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollectionsByCreator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollectionsCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'marketplaceAddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setCreationFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setDefaultListingPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setDefaultMintCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMarketplaceAddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;
  }

  
    export namespace CollectionCreatedEvent {
      export type InputTuple = [collectionAddress: AddressLike, name: string, symbol: string, baseURI: string, creator: AddressLike, createdAt: BigNumberish];
      export type OutputTuple = [collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint];
      export interface OutputObject {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface NFTCollectionFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): NFTCollectionFactory;
    waitForDeployment(): Promise<this>;

    interface: NFTCollectionFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    collectionAddressToInfo: TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, string, string, string, string, bigint] & {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint }],
      'view'
    >
    

    
    collections: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, string, string, bigint] & {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint }],
      'view'
    >
    

    
    createCollection: TypedContractMethod<
      [name: string, symbol: string, baseURI: string, ],
      [string],
      'payable'
    >
    

    
    createCollectionWithMint: TypedContractMethod<
      [name: string, symbol: string, baseURI: string, mintCount: BigNumberish, ],
      [string],
      'payable'
    >
    

    
    creationFee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    creatorToCollectionIndexes: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    defaultListingPrice: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    defaultMintCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getAllCollections: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getCollection: TypedContractMethod<
      [index: BigNumberish, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >
    

    
    getCollectionCountByCreator: TypedContractMethod<
      [creator: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getCollectionInfo: TypedContractMethod<
      [collectionAddress: AddressLike, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >
    

    
    getCollectionsByCreator: TypedContractMethod<
      [creator: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    getCollectionsCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    marketplaceAddress: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setCreationFee: TypedContractMethod<
      [_fee: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setDefaultListingPrice: TypedContractMethod<
      [_price: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setDefaultMintCount: TypedContractMethod<
      [_count: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setMarketplaceAddress: TypedContractMethod<
      [_marketplaceAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawFees: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'collectionAddressToInfo'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, string, string, string, string, bigint] & {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'collections'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, string, string, bigint] & {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'createCollection'): TypedContractMethod<
      [name: string, symbol: string, baseURI: string, ],
      [string],
      'payable'
    >;
getFunction(nameOrSignature: 'createCollectionWithMint'): TypedContractMethod<
      [name: string, symbol: string, baseURI: string, mintCount: BigNumberish, ],
      [string],
      'payable'
    >;
getFunction(nameOrSignature: 'creationFee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'creatorToCollectionIndexes'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'defaultListingPrice'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'defaultMintCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getAllCollections'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getCollection'): TypedContractMethod<
      [index: BigNumberish, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getCollectionCountByCreator'): TypedContractMethod<
      [creator: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getCollectionInfo'): TypedContractMethod<
      [collectionAddress: AddressLike, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getCollectionsByCreator'): TypedContractMethod<
      [creator: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getCollectionsCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'marketplaceAddress'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setCreationFee'): TypedContractMethod<
      [_fee: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setDefaultListingPrice'): TypedContractMethod<
      [_price: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setDefaultMintCount'): TypedContractMethod<
      [_count: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMarketplaceAddress'): TypedContractMethod<
      [_marketplaceAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawFees'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CollectionCreated'): TypedContractEvent<CollectionCreatedEvent.InputTuple, CollectionCreatedEvent.OutputTuple, CollectionCreatedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'CollectionCreated(address,string,string,string,address,uint256)': TypedContractEvent<CollectionCreatedEvent.InputTuple, CollectionCreatedEvent.OutputTuple, CollectionCreatedEvent.OutputObject>;
      CollectionCreated: TypedContractEvent<CollectionCreatedEvent.InputTuple, CollectionCreatedEvent.OutputTuple, CollectionCreatedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }