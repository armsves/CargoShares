/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface CollectionVaultFactoryInterface extends Interface {
    getFunction(nameOrSignature: "allVaults" | "collectionToVault" | "createCollectionVault" | "createVault" | "getVault" | "getVaults"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;

    encodeFunctionData(functionFragment: 'allVaults', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'collectionToVault', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'createCollectionVault', values: [string, string]): string;
encodeFunctionData(functionFragment: 'createVault', values: [string, string]): string;
encodeFunctionData(functionFragment: 'getVault', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getVaults', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'allVaults', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'collectionToVault', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createCollectionVault', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createVault', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVaults', data: BytesLike): Result;
  }

  
    export namespace VaultCreatedEvent {
      export type InputTuple = [collection: AddressLike, vault: AddressLike];
      export type OutputTuple = [collection: string, vault: string];
      export interface OutputObject {collection: string, vault: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CollectionVaultFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): CollectionVaultFactory;
    waitForDeployment(): Promise<this>;

    interface: CollectionVaultFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    allVaults: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    collectionToVault: TypedContractMethod<
      [arg0: AddressLike, ],
      [string],
      'view'
    >
    

    
    createCollectionVault: TypedContractMethod<
      [name: string, symbol: string, ],
      [string],
      'nonpayable'
    >
    

    
    createVault: TypedContractMethod<
      [name: string, symbol: string, ],
      [string],
      'nonpayable'
    >
    

    
    getVault: TypedContractMethod<
      [collection: AddressLike, ],
      [string],
      'view'
    >
    

    
    getVaults: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'allVaults'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'collectionToVault'): TypedContractMethod<
      [arg0: AddressLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'createCollectionVault'): TypedContractMethod<
      [name: string, symbol: string, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createVault'): TypedContractMethod<
      [name: string, symbol: string, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getVault'): TypedContractMethod<
      [collection: AddressLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getVaults'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;

    getEvent(key: 'VaultCreated'): TypedContractEvent<VaultCreatedEvent.InputTuple, VaultCreatedEvent.OutputTuple, VaultCreatedEvent.OutputObject>;

    filters: {
      
      'VaultCreated(address,address)': TypedContractEvent<VaultCreatedEvent.InputTuple, VaultCreatedEvent.OutputTuple, VaultCreatedEvent.OutputObject>;
      VaultCreated: TypedContractEvent<VaultCreatedEvent.InputTuple, VaultCreatedEvent.OutputTuple, VaultCreatedEvent.OutputObject>;
    
    };
  }