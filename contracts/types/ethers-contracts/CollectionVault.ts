/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface CollectionVaultInterface extends Interface {
    getFunction(nameOrSignature: "claimYield" | "deposit" | "depositYield" | "distributeYield" | "getYieldBalance" | "nftCollection" | "ownerOf" | "totalDeposits" | "totalYield" | "yieldBalance"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "YieldDeposited" | "YieldDistributed"): EventFragment;

    encodeFunctionData(functionFragment: 'claimYield', values?: undefined): string;
encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'depositYield', values?: undefined): string;
encodeFunctionData(functionFragment: 'distributeYield', values?: undefined): string;
encodeFunctionData(functionFragment: 'getYieldBalance', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'nftCollection', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'totalDeposits', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalYield', values?: undefined): string;
encodeFunctionData(functionFragment: 'yieldBalance', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'claimYield', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'depositYield', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'distributeYield', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getYieldBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nftCollection', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalDeposits', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalYield', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'yieldBalance', data: BytesLike): Result;
  }

  
    export namespace YieldDepositedEvent {
      export type InputTuple = [amount: BigNumberish];
      export type OutputTuple = [amount: bigint];
      export interface OutputObject {amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace YieldDistributedEvent {
      export type InputTuple = [owner: AddressLike, amount: BigNumberish];
      export type OutputTuple = [owner: string, amount: bigint];
      export interface OutputObject {owner: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CollectionVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): CollectionVault;
    waitForDeployment(): Promise<this>;

    interface: CollectionVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    claimYield: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    deposit: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    depositYield: TypedContractMethod<
      [],
      [void],
      'payable'
    >
    

    
    distributeYield: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    getYieldBalance: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    nftCollection: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    totalDeposits: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalYield: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    yieldBalance: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'claimYield'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'depositYield'): TypedContractMethod<
      [],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'distributeYield'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getYieldBalance'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'nftCollection'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalDeposits'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalYield'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'yieldBalance'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'YieldDeposited'): TypedContractEvent<YieldDepositedEvent.InputTuple, YieldDepositedEvent.OutputTuple, YieldDepositedEvent.OutputObject>;
getEvent(key: 'YieldDistributed'): TypedContractEvent<YieldDistributedEvent.InputTuple, YieldDistributedEvent.OutputTuple, YieldDistributedEvent.OutputObject>;

    filters: {
      
      'YieldDeposited(uint256)': TypedContractEvent<YieldDepositedEvent.InputTuple, YieldDepositedEvent.OutputTuple, YieldDepositedEvent.OutputObject>;
      YieldDeposited: TypedContractEvent<YieldDepositedEvent.InputTuple, YieldDepositedEvent.OutputTuple, YieldDepositedEvent.OutputObject>;
    

      'YieldDistributed(address,uint256)': TypedContractEvent<YieldDistributedEvent.InputTuple, YieldDistributedEvent.OutputTuple, YieldDistributedEvent.OutputObject>;
      YieldDistributed: TypedContractEvent<YieldDistributedEvent.InputTuple, YieldDistributedEvent.OutputTuple, YieldDistributedEvent.OutputObject>;
    
    };
  }