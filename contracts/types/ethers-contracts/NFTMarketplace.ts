/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace NFTMarketplace {
      
    export type ListingStruct = {seller: AddressLike, paymentToken: AddressLike, price: BigNumberish, isActive: boolean}

    export type ListingStructOutput = [seller: string, paymentToken: string, price: bigint, isActive: boolean] & {seller: string, paymentToken: string, price: bigint, isActive: boolean }
  
    }

  export interface NFTMarketplaceInterface extends Interface {
    getFunction(nameOrSignature: "BASIS_POINTS" | "authorizedListers" | "buy" | "cancelListing" | "getListing" | "list" | "listOwnedNFT" | "listings" | "marketplaceFee" | "onERC721Received" | "owner" | "renounceOwnership" | "setAuthorizedLister" | "setMarketplaceFee" | "transferOwnership" | "withdrawFees"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Cancelled" | "Listed" | "OwnershipTransferred" | "Purchased"): EventFragment;

    encodeFunctionData(functionFragment: 'BASIS_POINTS', values?: undefined): string;
encodeFunctionData(functionFragment: 'authorizedListers', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'buy', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'cancelListing', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getListing', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'list', values: [AddressLike, BigNumberish, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'listOwnedNFT', values: [AddressLike, BigNumberish, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'listings', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'marketplaceFee', values?: undefined): string;
encodeFunctionData(functionFragment: 'onERC721Received', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setAuthorizedLister', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'setMarketplaceFee', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawFees', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'BASIS_POINTS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'authorizedListers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelListing', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getListing', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'list', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'listOwnedNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'listings', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'marketplaceFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setAuthorizedLister', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMarketplaceFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;
  }

  
    export namespace CancelledEvent {
      export type InputTuple = [nftContract: AddressLike, tokenId: BigNumberish, seller: AddressLike];
      export type OutputTuple = [nftContract: string, tokenId: bigint, seller: string];
      export interface OutputObject {nftContract: string, tokenId: bigint, seller: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ListedEvent {
      export type InputTuple = [nftContract: AddressLike, tokenId: BigNumberish, seller: AddressLike, paymentToken: AddressLike, price: BigNumberish];
      export type OutputTuple = [nftContract: string, tokenId: bigint, seller: string, paymentToken: string, price: bigint];
      export interface OutputObject {nftContract: string, tokenId: bigint, seller: string, paymentToken: string, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PurchasedEvent {
      export type InputTuple = [nftContract: AddressLike, tokenId: BigNumberish, seller: AddressLike, buyer: AddressLike, price: BigNumberish];
      export type OutputTuple = [nftContract: string, tokenId: bigint, seller: string, buyer: string, price: bigint];
      export interface OutputObject {nftContract: string, tokenId: bigint, seller: string, buyer: string, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface NFTMarketplace extends BaseContract {
    
    connect(runner?: ContractRunner | null): NFTMarketplace;
    waitForDeployment(): Promise<this>;

    interface: NFTMarketplaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    BASIS_POINTS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    authorizedListers: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    buy: TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    cancelListing: TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getListing: TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, ],
      [NFTMarketplace.ListingStructOutput],
      'view'
    >
    

    
    list: TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, paymentToken: AddressLike, price: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    listOwnedNFT: TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, paymentToken: AddressLike, price: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    listings: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [[string, string, bigint, boolean] & {seller: string, paymentToken: string, price: bigint, isActive: boolean }],
      'view'
    >
    

    
    marketplaceFee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    onERC721Received: TypedContractMethod<
      [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike, ],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setAuthorizedLister: TypedContractMethod<
      [lister: AddressLike, authorized: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setMarketplaceFee: TypedContractMethod<
      [_fee: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawFees: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'BASIS_POINTS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'authorizedListers'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'buy'): TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'cancelListing'): TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getListing'): TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, ],
      [NFTMarketplace.ListingStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'list'): TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, paymentToken: AddressLike, price: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'listOwnedNFT'): TypedContractMethod<
      [nftContract: AddressLike, tokenId: BigNumberish, paymentToken: AddressLike, price: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'listings'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [[string, string, bigint, boolean] & {seller: string, paymentToken: string, price: bigint, isActive: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'marketplaceFee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'onERC721Received'): TypedContractMethod<
      [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setAuthorizedLister'): TypedContractMethod<
      [lister: AddressLike, authorized: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMarketplaceFee'): TypedContractMethod<
      [_fee: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawFees'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Cancelled'): TypedContractEvent<CancelledEvent.InputTuple, CancelledEvent.OutputTuple, CancelledEvent.OutputObject>;
getEvent(key: 'Listed'): TypedContractEvent<ListedEvent.InputTuple, ListedEvent.OutputTuple, ListedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Purchased'): TypedContractEvent<PurchasedEvent.InputTuple, PurchasedEvent.OutputTuple, PurchasedEvent.OutputObject>;

    filters: {
      
      'Cancelled(address,uint256,address)': TypedContractEvent<CancelledEvent.InputTuple, CancelledEvent.OutputTuple, CancelledEvent.OutputObject>;
      Cancelled: TypedContractEvent<CancelledEvent.InputTuple, CancelledEvent.OutputTuple, CancelledEvent.OutputObject>;
    

      'Listed(address,uint256,address,address,uint256)': TypedContractEvent<ListedEvent.InputTuple, ListedEvent.OutputTuple, ListedEvent.OutputObject>;
      Listed: TypedContractEvent<ListedEvent.InputTuple, ListedEvent.OutputTuple, ListedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Purchased(address,uint256,address,address,uint256)': TypedContractEvent<PurchasedEvent.InputTuple, PurchasedEvent.OutputTuple, PurchasedEvent.OutputObject>;
      Purchased: TypedContractEvent<PurchasedEvent.InputTuple, PurchasedEvent.OutputTuple, PurchasedEvent.OutputObject>;
    
    };
  }