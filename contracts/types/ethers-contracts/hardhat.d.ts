/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'CollectionVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CollectionVault__factory>
getContractFactory(name: 'CollectionVaultFactory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.CollectionVaultFactory__factory>
getContractFactory(name: 'NFTCollection', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.NFTCollection__factory>
getContractFactory(name: 'NFTCollectionFactory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.NFTCollectionFactory__factory>
getContractFactory(name: 'NFTMarketplace', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.NFTMarketplace__factory>
getContractFactory(name: 'ICollectionVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ICollectionVault__factory>
getContractFactory(name: 'ICollectionVaultFactory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ICollectionVaultFactory__factory>
getContractFactory(name: 'INFTCollectionFactory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.INFTCollectionFactory__factory>
getContractFactory(name: 'INFTMarketplace', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.INFTMarketplace__factory>

  getContractAt(name: 'CollectionVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CollectionVault>
getContractAt(name: 'CollectionVaultFactory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.CollectionVaultFactory>
getContractAt(name: 'NFTCollection', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.NFTCollection>
getContractAt(name: 'NFTCollectionFactory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.NFTCollectionFactory>
getContractAt(name: 'NFTMarketplace', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.NFTMarketplace>
getContractAt(name: 'ICollectionVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ICollectionVault>
getContractAt(name: 'ICollectionVaultFactory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ICollectionVaultFactory>
getContractAt(name: 'INFTCollectionFactory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.INFTCollectionFactory>
getContractAt(name: 'INFTMarketplace', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.INFTMarketplace>

  deployContract(name: 'CollectionVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CollectionVault>
deployContract(name: 'CollectionVaultFactory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CollectionVaultFactory>
deployContract(name: 'NFTCollection', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NFTCollection>
deployContract(name: 'NFTCollectionFactory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NFTCollectionFactory>
deployContract(name: 'NFTMarketplace', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NFTMarketplace>
deployContract(name: 'ICollectionVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ICollectionVault>
deployContract(name: 'ICollectionVaultFactory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ICollectionVaultFactory>
deployContract(name: 'INFTCollectionFactory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.INFTCollectionFactory>
deployContract(name: 'INFTMarketplace', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.INFTMarketplace>

  deployContract(name: 'CollectionVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CollectionVault>
deployContract(name: 'CollectionVaultFactory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.CollectionVaultFactory>
deployContract(name: 'NFTCollection', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NFTCollection>
deployContract(name: 'NFTCollectionFactory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NFTCollectionFactory>
deployContract(name: 'NFTMarketplace', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.NFTMarketplace>
deployContract(name: 'ICollectionVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ICollectionVault>
deployContract(name: 'ICollectionVaultFactory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ICollectionVaultFactory>
deployContract(name: 'INFTCollectionFactory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.INFTCollectionFactory>
deployContract(name: 'INFTMarketplace', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.INFTMarketplace>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  