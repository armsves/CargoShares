/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace INFTCollectionFactory {
      
    export type CollectionInfoStruct = {collectionAddress: AddressLike, name: string, symbol: string, baseURI: string, creator: AddressLike, createdAt: BigNumberish}

    export type CollectionInfoStructOutput = [collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint] & {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint }
  
    }

  export interface INFTCollectionFactoryInterface extends Interface {
    getFunction(nameOrSignature: "createCollection" | "getAllCollections" | "getCollection" | "getCollectionInfo" | "getCollectionsByCreator" | "getCollectionsCount"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;

    encodeFunctionData(functionFragment: 'createCollection', values: [string, string, string]): string;
encodeFunctionData(functionFragment: 'getAllCollections', values?: undefined): string;
encodeFunctionData(functionFragment: 'getCollection', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getCollectionInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getCollectionsByCreator', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getCollectionsCount', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'createCollection', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllCollections', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollection', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollectionInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollectionsByCreator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCollectionsCount', data: BytesLike): Result;
  }

  
    export namespace CollectionCreatedEvent {
      export type InputTuple = [collectionAddress: AddressLike, name: string, symbol: string, baseURI: string, creator: AddressLike, createdAt: BigNumberish];
      export type OutputTuple = [collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint];
      export interface OutputObject {collectionAddress: string, name: string, symbol: string, baseURI: string, creator: string, createdAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface INFTCollectionFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): INFTCollectionFactory;
    waitForDeployment(): Promise<this>;

    interface: INFTCollectionFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    createCollection: TypedContractMethod<
      [name: string, symbol: string, baseURI: string, ],
      [string],
      'payable'
    >
    

    
    getAllCollections: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getCollection: TypedContractMethod<
      [index: BigNumberish, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >
    

    
    getCollectionInfo: TypedContractMethod<
      [collectionAddress: AddressLike, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >
    

    
    getCollectionsByCreator: TypedContractMethod<
      [creator: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    getCollectionsCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'createCollection'): TypedContractMethod<
      [name: string, symbol: string, baseURI: string, ],
      [string],
      'payable'
    >;
getFunction(nameOrSignature: 'getAllCollections'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getCollection'): TypedContractMethod<
      [index: BigNumberish, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getCollectionInfo'): TypedContractMethod<
      [collectionAddress: AddressLike, ],
      [INFTCollectionFactory.CollectionInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getCollectionsByCreator'): TypedContractMethod<
      [creator: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getCollectionsCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'CollectionCreated'): TypedContractEvent<CollectionCreatedEvent.InputTuple, CollectionCreatedEvent.OutputTuple, CollectionCreatedEvent.OutputObject>;

    filters: {
      
      'CollectionCreated(address,string,string,string,address,uint256)': TypedContractEvent<CollectionCreatedEvent.InputTuple, CollectionCreatedEvent.OutputTuple, CollectionCreatedEvent.OutputObject>;
      CollectionCreated: TypedContractEvent<CollectionCreatedEvent.InputTuple, CollectionCreatedEvent.OutputTuple, CollectionCreatedEvent.OutputObject>;
    
    };
  }