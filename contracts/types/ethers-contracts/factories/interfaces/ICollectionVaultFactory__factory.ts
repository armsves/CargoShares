/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

  import { Contract, Interface, type ContractRunner } from "ethers";
  import type { ICollectionVaultFactory, ICollectionVaultFactoryInterface } from "../../interfaces/ICollectionVaultFactory.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "symbol",
        "type": "string"
      }
    ],
    "name": "createVault",
    "outputs": [
      {
        "internalType": "contract ICollectionVault",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getVaults",
    "outputs": [
      {
        "internalType": "contract ICollectionVault[]",
        "name": "",
        "type": "address[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
] as const;

  export class ICollectionVaultFactory__factory {
    static readonly abi = _abi;
    static createInterface(): ICollectionVaultFactoryInterface {
      return new Interface(_abi) as ICollectionVaultFactoryInterface;
    }
    static connect(address: string, runner?: ContractRunner | null): ICollectionVaultFactory {
      return new Contract(address, _abi, runner) as unknown as ICollectionVaultFactory;
    }
  }
  